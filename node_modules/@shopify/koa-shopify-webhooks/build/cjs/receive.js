'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var crypto = require('crypto');
var safeCompare = require('safe-compare');
var bodyParser = require('koa-bodyparser');
var mount = require('koa-mount');
var compose = require('koa-compose');
var network = require('@shopify/network');
var types = require('./types.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var safeCompare__default = /*#__PURE__*/_interopDefaultLegacy(safeCompare);
var bodyParser__default = /*#__PURE__*/_interopDefaultLegacy(bodyParser);
var mount__default = /*#__PURE__*/_interopDefaultLegacy(mount);
var compose__default = /*#__PURE__*/_interopDefaultLegacy(compose);

function receiveWebhook({
  secret,
  path,
  onReceived = noop
}) {
  async function receiveWebhookMiddleware(ctx, next) {
    const hmac = ctx.get(types.WebhookHeader.Hmac);
    const topic = ctx.get(types.WebhookHeader.Topic);
    const domain = ctx.get(types.WebhookHeader.Domain);
    const {
      rawBody
    } = ctx.request;
    const generatedHash = crypto.createHmac('sha256', secret).update(rawBody, 'utf8').digest('base64');
    const graphqlTopic = topic.toUpperCase().replace(/\//g, '_');

    if (safeCompare__default['default'](generatedHash, hmac)) {
      ctx.res.statusCode = network.StatusCode.Accepted;
      ctx.state.webhook = {
        topic: graphqlTopic,
        domain,
        payload: JSON.parse(rawBody)
      };
      await onReceived(ctx);
      await next();
    } else {
      ctx.res.statusCode = network.StatusCode.Forbidden;
    }
  }

  const middleware = compose__default['default']([bodyParser__default['default'](), receiveWebhookMiddleware]);
  return path ? mount__default['default'](path, middleware) : middleware;
}

function noop() {}

exports.receiveWebhook = receiveWebhook;
