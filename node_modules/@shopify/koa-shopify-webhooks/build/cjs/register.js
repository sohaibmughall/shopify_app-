'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var network = require('@shopify/network');
var types = require('./types.js');

exports.ApiVersion = void 0;

(function (ApiVersion) {
  ApiVersion["April19"] = "2019-04";
  ApiVersion["July19"] = "2019-07";
  ApiVersion["October19"] = "2019-10";
  ApiVersion["January20"] = "2020-01";
  ApiVersion["April20"] = "2020-04";
  ApiVersion["July20"] = "2020-07";
  ApiVersion["October20"] = "2020-10";
  ApiVersion["Unstable"] = "unstable";
  ApiVersion["Unversioned"] = "unversioned";
})(exports.ApiVersion || (exports.ApiVersion = {}));

exports.DeliveryMethod = void 0;

(function (DeliveryMethod) {
  DeliveryMethod["Http"] = "http";
  DeliveryMethod["EventBridge"] = "eventbridge";
})(exports.DeliveryMethod || (exports.DeliveryMethod = {}));

async function registerWebhook({
  address,
  topic,
  accessToken,
  shop,
  apiVersion,
  deliveryMethod = exports.DeliveryMethod.Http
}) {
  const response = await fetch(`https://${shop}/admin/api/${apiVersion}/graphql.json`, {
    method: network.Method.Post,
    body: buildQuery(topic, address, deliveryMethod),
    headers: {
      [types.WebhookHeader.AccessToken]: accessToken,
      [network.Header.ContentType]: 'application/graphql'
    }
  });
  const result = await response.json();
  return {
    success: isSuccess(result, deliveryMethod),
    result
  };
}

function isSuccess(result, deliveryMethod) {
  switch (deliveryMethod) {
    case exports.DeliveryMethod.Http:
      return Boolean(result.data && result.data.webhookSubscriptionCreate && result.data.webhookSubscriptionCreate.webhookSubscription);

    case exports.DeliveryMethod.EventBridge:
      return Boolean(result.data && result.data.eventBridgeWebhookSubscriptionCreate && result.data.eventBridgeWebhookSubscriptionCreate.webhookSubscription);
  }
}

function buildQuery(topic, address, deliveryMethod) {
  let mutationName;
  let webhookSubscriptionArgs;

  switch (deliveryMethod) {
    case exports.DeliveryMethod.Http:
      mutationName = 'webhookSubscriptionCreate';
      webhookSubscriptionArgs = `{callbackUrl: "${address}"}`;
      break;

    case exports.DeliveryMethod.EventBridge:
      mutationName = 'eventBridgeWebhookSubscriptionCreate';
      webhookSubscriptionArgs = `{arn: "${address}"}`;
      break;
  }

  return `
    mutation webhookSubscriptionCreate {
      ${mutationName}(topic: ${topic}, webhookSubscription: ${webhookSubscriptionArgs}) {
        userErrors {
          field
          message
        }
        webhookSubscription {
          id
        }
      }
    }
  `;
}

exports.registerWebhook = registerWebhook;
